{
	"info": {
		"_postman_id": "bf0525cd-aaf0-44b5-9597-81e53a2cb03f",
		"name": "FastAPI-localhost",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18032760",
		"_collection_link": "https://btocntrs.postman.co/workspace/Beto-Contreras-Team-Workspace~a3ad3330-4204-4db6-8283-cde625e0309c/collection/18032760-bf0525cd-aaf0-44b5-9597-81e53a2cb03f?action=share&source=collection_link&creator=18032760"
	},
	"item": [
		{
			"name": "Post a proveedor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json()",
							"const id = jsonData.id",
							"const rfc = jsonData.rfc",
							"const razon_social = jsonData.razon_social",
							"",
							"// Establecemos la variable de coleccion id",
							"pm.collectionVariables.set('id', id);",
							"pm.collectionVariables.set('rfc', rfc);",
							"pm.collectionVariables.set('razon_social', razon_social);",
							"",
							"pm.test(\"Proveedor saved with successful\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"// Verificar que 'id' no sea null",
							"pm.test(\"ID is not null\", function () {",
							"    pm.expect(id).to.not.be.null;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"rfc\": \"GIS211118AM9\",\n  \"razon_social\": \"GRUPO SINAI\",\n  \"nombre_comercial\": \"AGUA SINAI\",\n  \"productos\": \"HIELO Y AGUA\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{host}}:{{port}}/{{collection}}/",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"{{collection}}",
						""
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Post a duplicated proveedor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 409 - Proveedor ya existe\", function () {",
							"    pm.response.to.have.status(409);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"rfc\": \"GIS211118AM9\",\n  \"razon_social\": \"GRUPO SINAI\",\n  \"nombre_comercial\": \"AGUA SINAI\",\n  \"productos\": \"HIELO Y AGUA\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{host}}:{{port}}/{{collection}}/",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"{{collection}}",
						""
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Update a proveedor by body",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"var new_razon_social = jsonData.razon_social",
							"var old_razon_social = pm.collectionVariables.get('razon_social')",
							"var banco = jsonData.banco",
							"var cuenta = jsonData.cuenta",
							"var telefono = jsonData.telefono",
							"",
							"",
							"pm.test(\"Proveedor updated by body is successful\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Razon social has changed', function(){",
							"    pm.expect(new_razon_social).to.not.be.eq(old_razon_social);",
							"})",
							"",
							"pm.test('Field banco is not empty', function(){",
							"    pm.expect(banco).not.to.eq('');",
							"})",
							"",
							"pm.test('Field cuenta is not empty', function(){",
							"    pm.expect(cuenta).not.to.eq('');",
							"})",
							"",
							"pm.test('Field telefono is empty', function(){",
							"    pm.expect(telefono).to.eql(null);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "    {\n        \"id\": {{id}},\n        \"rfc\": \"{{rfc}}\",\n        \"razon_social\": \"GRUPO INDUSTRIAL SINAI\",\n        \"nombre_comercial\": \"AGUA SINAI\",\n        \"productos\": \"HIELO Y AGUA\",\n        \"banco\": \"BBVA\",\n        \"cuenta\": \"0118037582\"\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{host}}:{{port}}/{{collection}}/",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"{{collection}}",
						""
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Update a fake proveedor by body",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Fake proveedor by body not updated\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "    {\n        \"id\": 10,\n        \"rfc\": \"XXX\",\n        \"razon_social\": \"GRUPO INDUSTRIAL SINAI\",\n        \"nombre_comercial\": \"AGUA SINAI\",\n        \"productos\": \"HIELO Y AGUA\",\n        \"banco\": \"BBVA\",\n        \"cuenta\": \"0118037582\"\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{host}}:{{port}}/{{collection}}/",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"{{collection}}",
						""
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Update a proveedor by rfc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"var telefono = jsonData.telefono",
							"",
							"",
							"pm.test(\"Proveedor updated by rfc is successful\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Field telefono is not empty', function(){",
							"    pm.expect(telefono).not.to.eql('');",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "    {\n        \"id\": {{id}},\n        \"rfc\": \"{{rfc}}\",\n        \"razon_social\": \"GRUPO INDUSTRIAL SINAI\",\n        \"nombre_comercial\": \"AGUA SINAI\",\n        \"productos\": \"HIELO Y AGUA\",\n        \"banco\": \"BBVA\",\n        \"cuenta\": \"0118037582\",\n        \"telefono\": \"9828240381\"\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{host}}:{{port}}/{{collection}}/{{rfc}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"{{collection}}",
						"{{rfc}}"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Update a fake proveedor by rfc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Fake proveedor by rfc not updated\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "    {\n        \"id\": 10,\n        \"rfc\": \"XXX\",\n        \"razon_social\": \"GRUPO INDUSTRIAL SINAI\",\n        \"nombre_comercial\": \"AGUA SINAI\",\n        \"productos\": \"HIELO Y AGUA\",\n        \"banco\": \"BBVA\",\n        \"cuenta\": \"0118037582\",\n        \"telefono\": \"9828240381\"\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{host}}:{{port}}/{{collection}}/{{rfc}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"{{collection}}",
						"{{rfc}}"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Get all proveedores",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verificar el status code 200\r",
							"pm.test(\"List of proveedores founded\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Verificar si el cuerpo de la respuesta es un array\r",
							"pm.test(\"Response body is an array\", function () {\r",
							"    // Verificar que el contenido de la respuesta sea un array\r",
							"    pm.expect(pm.response.json()).to.be.an('array');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{host}}:{{port}}/{{collection}}/",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"{{collection}}",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a proveedor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Getting a proveedor by rfc\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{host}}:{{port}}/{{collection}}/{{rfc}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"{{collection}}",
						"{{rfc}}"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Get a fake proveedor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Getting a fake proveedor\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{host}}:{{port}}/{{collection}}/XXX",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"{{collection}}",
						"XXX"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Delete a proveedor by body",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Proveedor deleted by body with successful\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "    {\r\n        \"id\": {{id}},\r\n        \"rfc\": \"{{rfc}}\",\r\n        \"razon_social\": \"GRUPO INDUSTRIAL SINAI\",\r\n        \"nombre_comercial\": \"AGUA SINAI\",\r\n        \"productos\": \"HIELO Y AGUA\",\r\n        \"banco\": \"BBVA\",\r\n        \"cuenta\": \"0118037582\",\r\n        \"telefono\": \"9828240381\"\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{host}}:{{port}}/{{collection}}/",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"{{collection}}",
						""
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Post an other proveedor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json()",
							"const id = jsonData.id",
							"const rfc = jsonData.rfc",
							"const razon_social = jsonData.razon_social",
							"",
							"// Establecemos la variable de coleccion id",
							"pm.collectionVariables.set('id', id);",
							"pm.collectionVariables.set('rfc', rfc);",
							"pm.collectionVariables.set('razon_social', razon_social);",
							"",
							"pm.test(\"Proveedor saved with successful\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"// Verificar que 'id' no sea null",
							"pm.test(\"ID is not null\", function () {",
							"    pm.expect(id).to.not.be.null;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"rfc\": \"GIS211118AM9\",\n  \"razon_social\": \"GRUPO SINAI\",\n  \"nombre_comercial\": \"AGUA SINAI\",\n  \"productos\": \"HIELO Y AGUA\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{host}}:{{port}}/{{collection}}/",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"{{collection}}",
						""
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Delete a proveedor by rfc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Proveedor deleted by rfc with successful\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{host}}:{{port}}/{{collection}}/{{rfc}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"{{collection}}",
						"{{rfc}}"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "",
			"type": "string"
		},
		{
			"key": "rfc",
			"value": "",
			"type": "string"
		},
		{
			"key": "razon_social",
			"value": "",
			"type": "string"
		}
	]
}